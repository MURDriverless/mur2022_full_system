// Generated by gencpp from file mur2022/place_holder_msg.msg
// DO NOT EDIT!


#ifndef MUR2022_MESSAGE_PLACE_HOLDER_MSG_H
#define MUR2022_MESSAGE_PLACE_HOLDER_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mur2022
{
template <class ContainerAllocator>
struct place_holder_msg_
{
  typedef place_holder_msg_<ContainerAllocator> Type;

  place_holder_msg_()
    : temp_bool(false)
    , temp_uint32(0)
    , temp_int32(0)
    , temp_float32(0.0)
    , temp_float64(0.0)
    , temp_string()
    , temp_float64_array()  {
    }
  place_holder_msg_(const ContainerAllocator& _alloc)
    : temp_bool(false)
    , temp_uint32(0)
    , temp_int32(0)
    , temp_float32(0.0)
    , temp_float64(0.0)
    , temp_string(_alloc)
    , temp_float64_array(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _temp_bool_type;
  _temp_bool_type temp_bool;

   typedef uint32_t _temp_uint32_type;
  _temp_uint32_type temp_uint32;

   typedef int32_t _temp_int32_type;
  _temp_int32_type temp_int32;

   typedef float _temp_float32_type;
  _temp_float32_type temp_float32;

   typedef double _temp_float64_type;
  _temp_float64_type temp_float64;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _temp_string_type;
  _temp_string_type temp_string;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _temp_float64_array_type;
  _temp_float64_array_type temp_float64_array;





  typedef boost::shared_ptr< ::mur2022::place_holder_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mur2022::place_holder_msg_<ContainerAllocator> const> ConstPtr;

}; // struct place_holder_msg_

typedef ::mur2022::place_holder_msg_<std::allocator<void> > place_holder_msg;

typedef boost::shared_ptr< ::mur2022::place_holder_msg > place_holder_msgPtr;
typedef boost::shared_ptr< ::mur2022::place_holder_msg const> place_holder_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mur2022::place_holder_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mur2022::place_holder_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mur2022::place_holder_msg_<ContainerAllocator1> & lhs, const ::mur2022::place_holder_msg_<ContainerAllocator2> & rhs)
{
  return lhs.temp_bool == rhs.temp_bool &&
    lhs.temp_uint32 == rhs.temp_uint32 &&
    lhs.temp_int32 == rhs.temp_int32 &&
    lhs.temp_float32 == rhs.temp_float32 &&
    lhs.temp_float64 == rhs.temp_float64 &&
    lhs.temp_string == rhs.temp_string &&
    lhs.temp_float64_array == rhs.temp_float64_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mur2022::place_holder_msg_<ContainerAllocator1> & lhs, const ::mur2022::place_holder_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mur2022

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mur2022::place_holder_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mur2022::place_holder_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mur2022::place_holder_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mur2022::place_holder_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mur2022::place_holder_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mur2022::place_holder_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mur2022::place_holder_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13548be3cae6b9d8d8453c21a93e0345";
  }

  static const char* value(const ::mur2022::place_holder_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13548be3cae6b9d8ULL;
  static const uint64_t static_value2 = 0xd8453c21a93e0345ULL;
};

template<class ContainerAllocator>
struct DataType< ::mur2022::place_holder_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mur2022/place_holder_msg";
  }

  static const char* value(const ::mur2022::place_holder_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mur2022::place_holder_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool temp_bool\n"
"uint32 temp_uint32\n"
"int32 temp_int32\n"
"float32 temp_float32\n"
"float64 temp_float64\n"
"string temp_string\n"
"float64[] temp_float64_array\n"
;
  }

  static const char* value(const ::mur2022::place_holder_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mur2022::place_holder_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temp_bool);
      stream.next(m.temp_uint32);
      stream.next(m.temp_int32);
      stream.next(m.temp_float32);
      stream.next(m.temp_float64);
      stream.next(m.temp_string);
      stream.next(m.temp_float64_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct place_holder_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mur2022::place_holder_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mur2022::place_holder_msg_<ContainerAllocator>& v)
  {
    s << indent << "temp_bool: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_bool);
    s << indent << "temp_uint32: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.temp_uint32);
    s << indent << "temp_int32: ";
    Printer<int32_t>::stream(s, indent + "  ", v.temp_int32);
    s << indent << "temp_float32: ";
    Printer<float>::stream(s, indent + "  ", v.temp_float32);
    s << indent << "temp_float64: ";
    Printer<double>::stream(s, indent + "  ", v.temp_float64);
    s << indent << "temp_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.temp_string);
    s << indent << "temp_float64_array[]" << std::endl;
    for (size_t i = 0; i < v.temp_float64_array.size(); ++i)
    {
      s << indent << "  temp_float64_array[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.temp_float64_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MUR2022_MESSAGE_PLACE_HOLDER_MSG_H
